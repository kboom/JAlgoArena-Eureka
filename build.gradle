import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

buildscript {
    ext {
        kotlinVersion = '1.0.6'
        springBootVersion = '1.4.2.RELEASE'
    }

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'com.bmuschko', name: 'gradle-docker-plugin', version: '3.0.8'
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
    }
}

apply plugin: 'kotlin'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.bmuschko.docker-remote-api'

apply from: "$projectDir/gradle/versioning.gradle"

repositories {
    mavenCentral()
}

jar {
    baseName = 'jalgoarena-eureka'
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion",
            'org.springframework.cloud:spring-cloud-starter-hystrix-dashboard',
            'org.springframework.cloud:spring-cloud-starter-eureka-server'
}

defaultTasks 'clean', 'bootRepackage'

task stage {
    dependsOn 'bootRepackage'
}

bootRun {
    systemProperty 'server.port', Integer.getInteger('server.port', 5000)
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Camden.SR3"
    }
}

task releaseZip(type: Zip, dependsOn: 'bootRepackage') {
    from 'lib/', 'build/libs/', 'run.sh'
    include '*.jar', '*.sh'
    include '*/*'
    archiveName "JAlgoArena-Eureka-${version}.zip"
    destinationDir(file('build/libs'))
}

task buildMyAppImage(type: DockerBuildImage) {
    dependsOn assemble
    inputDir = project.rootDir
    tag = project.name
}

task createMyAppContainer(type: DockerCreateContainer) {
    dependsOn buildMyAppImage
    targetImageId { buildMyAppImage.getImageId() }
    portBindings = [":80"]
}

task startMyAppContainer(type: DockerStartContainer) {
    dependsOn createMyAppContainer
    targetContainerId { createMyAppContainer.getContainerId() }
}

task stopMyAppContainer(type: DockerStopContainer) {
    targetContainerId { createMyAppContainer.getContainerId() }
}
